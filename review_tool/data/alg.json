{
    "二叉树": [
        {
            "cost_time": 10,
            "desc": "二叉树先序遍历 - 非递归 - 时间 O(n), 空间 O(n)",
            "diff": 1,
            "id": "1",
            "init_time": 1563532733,
            "last_time": 1564999787,
            "times": 3,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "二叉树中序遍历 - 非递归 - 时间 O(n), 空间 O(n)",
            "diff": 1,
            "id": "2",
            "init_time": 1563532733,
            "last_time": 1564815559,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "二叉树后序遍历 - 非递归 - 时间 O(n), 空间 O(n)",
            "diff": 1,
            "id": "3",
            "init_time": 1563532733,
            "last_time": 1564810370,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "二叉树先序遍历 - 非递归 - 时间 O(n), 空间 O(1)",
            "diff": 2,
            "id": "4",
            "init_time": 1563532733,
            "last_time": 1564750787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "二叉树中序遍历 - 非递归 - 时间 O(n), 空间 O(1)",
            "diff": 2,
            "id": "5",
            "init_time": 1563532733,
            "last_time": 1564810370,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "二叉树后序遍历 - 非递归 - 时间 O(n), 空间 O(1)",
            "diff": 2,
            "id": "6",
            "init_time": 1563532733,
            "last_time": 1564999787,
            "times": 3,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "打印二叉树边界节点 - 标准 1: (1, 头节点为边界节点; 2, 叶节点为边界节点; 3, 如果节点在其所在的层中是最左或最右边的, 那么也是边界节点) ",
            "diff": 2,
            "id": "7",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "打印二叉树边界节点 - 标准 2: (1, 头节点为边界节点; 2, 叶节点为边界节点, 树左边界延伸下去的路径为边界节点; 3, 树右边延伸下去的路径为边界节点)",
            "diff": 2,
            "id": "8",
            "init_time": 1563532733,
            "last_time": 1564815559,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "直观的打印二叉树",
            "diff": 3,
            "id": "9",
            "init_time": 1563532733,
            "last_time": 1564750787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "二叉树序列化和反序列化 - 先序遍历 - 递归实现",
            "diff": 2,
            "id": "10",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "二叉树序列化和反序列化 - 先序遍历 - 非递归实现, 空间 O(n)",
            "diff": 2,
            "id": "11",
            "init_time": 1563532733,
            "last_time": 1564810370,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "二叉树序列化和反序列化 - 层次遍历",
            "diff": 2,
            "id": "12",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "在二叉树中找到累加和为指定值的最长路径长度, 节点值可正可负",
            "diff": 3,
            "id": "13",
            "init_time": 1563532733,
            "last_time": 1564815559,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "找到二叉树中的最大搜索二叉树",
            "diff": 3,
            "id": "14",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在二叉树中找到累加和为指定值的一条路径, 节点值可正可负",
            "diff": 2,
            "id": "15",
            "init_time": 1563532733,
            "last_time": 1564815559,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "给定一个二叉树节点，找到它在中序遍历中的下一个节点",
            "diff": 2,
            "id": "16",
            "init_time": 1563532733,
            "last_time": 1564810370,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是对称结构",
            "diff": 1,
            "id": "17",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "t1 树是否有与 t2 树拓扑结构完全相同的子树",
            "diff": 2,
            "id": "18",
            "init_time": 1563532733,
            "last_time": 1564815559,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "树中两个节点的最低公共祖先 - 二叉搜索树",
            "diff": 2,
            "id": "19",
            "init_time": 1563532733,
            "last_time": 1564750787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "树中两个节点的最低公共祖先 - 普通树 - 没有父指针",
            "diff": 2,
            "id": "20",
            "init_time": 1563532733,
            "last_time": 1564328400,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 25,
            "desc": "树中两个节点的最低公共祖先 - 普通树 - 有父指针",
            "diff": 2,
            "id": "21",
            "init_time": 1563532733,
            "last_time": 1564999787,
            "times": 3,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "反转二叉树",
            "diff": 1,
            "id": "22",
            "init_time": 1563532733,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "找到二叉树中符合二叉搜索树条件的最大拓扑结构",
            "diff": 3,
            "id": "23",
            "init_time": 1563532733,
            "last_time": 1564999787,
            "times": 3,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "二叉树按层打印，需要换行",
            "diff": 1,
            "id": "24",
            "init_time": 1563532733,
            "last_time": 1564750787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "二叉树按层以 zigzag 方式打印，需要换行 - 双栈方法",
            "diff": 1,
            "id": "25",
            "init_time": 1563532733,
            "last_time": 1564810370,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "二叉树按层以 zigzag 方式打印，需要换行 - 双端队列方法",
            "diff": 2,
            "id": "26",
            "init_time": 1563532733,
            "last_time": 1564750787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "找到二叉搜索树中两个错误的节点",
            "diff": 1,
            "id": "27",
            "init_time": 1563533057,
            "last_time": 1564829451,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "t1 树是否包含 t2 树的完整拓扑结构",
            "diff": 2,
            "id": "28",
            "init_time": 1563533057,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是平衡二叉树",
            "diff": 2,
            "id": "29",
            "init_time": 1563533057,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "二叉搜索树第 k 大节点",
            "diff": 1,
            "id": "30",
            "init_time": 1563540102,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "判断数组是否是二叉搜索树的后序遍历",
            "diff": 1,
            "id": "31",
            "init_time": 1563540102,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 360,
            "desc": "实现 avl - 参考 skywind 的实现",
            "diff": 5,
            "id": "32",
            "init_time": 1563540102,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 1
        },
        {
            "cost_time": 20,
            "desc": "根据后序遍历重建二叉搜索树",
            "diff": 1,
            "id": "33",
            "init_time": 1563640121,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是二叉搜索树 - 递归",
            "diff": 1,
            "id": "34",
            "init_time": 1563640121,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是二叉搜索树 - 非递归 - 空间 O(n)",
            "diff": 1,
            "id": "35",
            "init_time": 1563640121,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是二叉搜索树 - 非递归 - 空间 O(1)",
            "diff": 1,
            "id": "36",
            "init_time": 1563640121,
            "last_time": 1564894249,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断二叉树是否是完全二叉树",
            "diff": 1,
            "id": "37",
            "init_time": 1563640121,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "根据有序数组重建平衡二叉树",
            "diff": 1,
            "id": "38",
            "init_time": 1563640121,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "两个节点的最低公共祖先 - 后序遍历解法",
            "diff": 2,
            "id": "39",
            "init_time": 1563640121,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "两个节点的最低公共祖先 - 批量查询 - 时间 O(1)",
            "diff": 4,
            "id": "40",
            "init_time": 1563640121,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "两个节点的最低公共祖先 - 批量查询 - 时间 O(h)",
            "diff": 3,
            "id": "41",
            "init_time": 1563640121,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "二叉树中两节点间的最大距离",
            "diff": 3,
            "id": "42",
            "init_time": 1563686916,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "根据二叉树中序和后序遍历重建二叉树",
            "diff": 2,
            "id": "43",
            "init_time": 1563721051,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "根据二叉树先序和中序遍历重建二叉树",
            "diff": 2,
            "id": "44",
            "init_time": 1563721051,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "根据二叉树先序和后序遍历重建二叉树 - 答案不唯一，返回一种即可",
            "diff": 3,
            "id": "45",
            "init_time": 1563721051,
            "last_time": 1564969362,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "用二叉树先序和中序遍历数组生成后序遍历数组",
            "diff": 3,
            "id": "46",
            "init_time": 1563721051,
            "last_time": 1564999787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "计算 1 ~ n 的序列可以形成多少种形态的搜索二叉树",
            "diff": 2,
            "id": "47",
            "init_time": 1563721051,
            "last_time": 1564999787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "生成 1 ~ n 的序列可以形成的所有搜索二叉树",
            "diff": 3,
            "id": "48",
            "init_time": 1563721051,
            "last_time": 1564999787,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "先序遍历 - 非递归 - 把左孩子也放到栈里",
            "diff": 1,
            "id": "49",
            "init_time": 1564970316,
            "last_time": 1564999787,
            "times": 1,
            "tmp_ignore": 0
        }
    ],
    "优秀代码阅读": [
        {
            "cost_time": 120,
            "desc": "阅读 linux 红黑树",
            "diff": 5,
            "id": "50",
            "init_time": 1563852523,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 1
        },
        {
            "cost_time": 120,
            "desc": "阅读 skywind avl 实现",
            "diff": 4,
            "id": "51",
            "init_time": 1563852523,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 1
        }
    ],
    "位运算": [
        {
            "cost_time": 5,
            "desc": "不用额外变量交换两个整数的值",
            "diff": 1,
            "id": "52",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "不用任何比较判断找出两个数中 较大的数",
            "diff": 2,
            "id": "53",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "只用位运算实现整数的加减乘除",
            "diff": 3,
            "id": "54",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "整数的二进制表达中有多少个1 - 循环",
            "diff": 1,
            "id": "55",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "整数的二进制表达中有多少个1 - 不能用循环",
            "diff": 2,
            "id": "56",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "在其他数都出现偶数次的数组中找到出现奇数次的数 - 只有 1 个",
            "diff": 2,
            "id": "57",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在其他数都出现偶数次的数组中找到出现奇数次的数 - 只有 2 个",
            "diff": 2,
            "id": "58",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在其他数都出现 k 次的数组中找到只出现 1 次的数",
            "diff": 2,
            "id": "59",
            "init_time": 1568533916,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "动态规划和递归": [
        {
            "cost_time": 5,
            "desc": "快速幂 - 非递归",
            "diff": 2,
            "id": "60",
            "init_time": 1563811179,
            "last_time": 1563853052,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "矩阵相乘",
            "diff": 2,
            "id": "61",
            "init_time": 1563811179,
            "last_time": 1563853052,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "斐波那契数列第 n 项 - 傻逼递归",
            "diff": 1,
            "id": "62",
            "init_time": 1563811179,
            "last_time": 1563853052,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "斐波那契数列第 n 项 - O(N)",
            "diff": 2,
            "id": "63",
            "init_time": 1563811179,
            "last_time": 1563853052,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "斐波那契数列第 n 项 - O(logN) - 矩阵相乘 + 快速幂",
            "diff": 4,
            "id": "64",
            "init_time": 1563811179,
            "last_time": 1563853052,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "矩阵的最小路径和 - dp 不压缩空间",
            "diff": 2,
            "id": "65",
            "init_time": 1563899471,
            "last_time": 1564249737,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "矩阵的最小路径和 - dp 压缩空间",
            "diff": 2,
            "id": "66",
            "init_time": 1563899471,
            "last_time": 1564249737,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "换钱的最少货币数, 每张面额可以使用多次 - 非压缩空间",
            "diff": 2,
            "id": "67",
            "init_time": 1563899471,
            "last_time": 1564249737,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "换钱的最少货币数, 每张面额可以使用多次 - 压缩空间",
            "diff": 2,
            "id": "68",
            "init_time": 1563899471,
            "last_time": 1564249737,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "换钱的最少货币数, 每张面额只能使用一次 - 非压缩空间",
            "diff": 2,
            "id": "69",
            "init_time": 1563899471,
            "last_time": 1564249737,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "换钱的最少货币数, 每张面额只能使用一次 - 压缩空间",
            "diff": 2,
            "id": "70",
            "init_time": 1563899471,
            "last_time": 1564382095,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "换钱的方法数 - 暴力递归",
            "diff": 3,
            "id": "71",
            "init_time": 1564120549,
            "last_time": 1564382095,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "换钱的方法数 - 记忆数组",
            "diff": 3,
            "id": "72",
            "init_time": 1564120549,
            "last_time": 1564382095,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "换钱的方法数 - dp - 枚举当前使用钱的不同张数",
            "diff": 2,
            "id": "73",
            "init_time": 1564211168,
            "last_time": 1564382095,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "换钱的方法数 - dp - 不枚举当前使用钱的张数，直接使用已有的",
            "diff": 3,
            "id": "74",
            "init_time": 1564211168,
            "last_time": 1564382095,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "换钱的方法数 - dp - 不枚举当前使用钱的张数，直接使用已有的 - 空间压缩",
            "diff": 4,
            "id": "75",
            "init_time": 1564211168,
            "last_time": 1564474573,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "最长递增子序列 - dp - O(N^2)",
            "diff": 3,
            "id": "76",
            "init_time": 1564235744,
            "last_time": 1564474573,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "最长递增子序列 - dp - O(NlogN)",
            "diff": 4,
            "id": "77",
            "init_time": 1564235744,
            "last_time": 1564474573,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "汉诺塔问题求解步骤",
            "diff": 4,
            "id": "78",
            "init_time": 1564235792,
            "last_time": 1564474573,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "最长公共子序列",
            "diff": 4,
            "id": "79",
            "init_time": 1564242300,
            "last_time": 1565533783,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "最长公共子串 - dp - 空间 O(NM)",
            "diff": 3,
            "id": "80",
            "init_time": 1564505651,
            "last_time": 1565533783,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "最长公共子串 - dp - 空间 O(1)",
            "diff": 4,
            "id": "81",
            "init_time": 1564505651,
            "last_time": 1565533783,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "字符串最小编辑代价 - dp - 空间 O(NM)",
            "diff": 3,
            "id": "82",
            "init_time": 1564505651,
            "last_time": 1565679412,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "字符串最小编辑代价 - dp - 空间 O(N or M)",
            "diff": 4,
            "id": "83",
            "init_time": 1564505651,
            "last_time": 1565679412,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "判断 aim 是否是 str1 和 str2 交错而成的字符串 - dp - 非压缩空间",
            "diff": 3,
            "id": "84",
            "init_time": 1564577173,
            "last_time": 1565679412,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "判断 aim 是否是 str1 和 str2 交错而成的字符串 - dp - 压缩空间",
            "diff": 4,
            "id": "85",
            "init_time": 1564577173,
            "last_time": 1565996663,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "龙与地下城游戏问题 - dp",
            "diff": 3,
            "id": "86",
            "init_time": 1564580433,
            "last_time": 1565996663,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "数字字符串转成字母有多少种转法 - 暴力递归",
            "diff": 2,
            "id": "87",
            "init_time": 1564675746,
            "last_time": 1565996663,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "数字字符串转成字母有多少种转法 - dp - 非压缩空间",
            "diff": 2,
            "id": "88",
            "init_time": 1564675746,
            "last_time": 1565996663,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "数字字符串转成字母有多少种转法 - dp - 压缩空间 O(1)",
            "diff": 3,
            "id": "89",
            "init_time": 1564675746,
            "last_time": 1565996663,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "表达式得到期望值的组合数 - 暴力递归",
            "diff": 3,
            "id": "90",
            "init_time": 1564675746,
            "last_time": 1567220689,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "表达式得到期望值的组合数 - dp",
            "diff": 4,
            "id": "91",
            "init_time": 1564675746,
            "last_time": 1567220689,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - 暴力递归",
            "diff": 3,
            "id": "92",
            "init_time": 1564750026,
            "last_time": 1567220689,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - dp",
            "diff": 4,
            "id": "93",
            "init_time": 1564750026,
            "last_time": 1567220689,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "跳跃游戏 - 暴力递归",
            "diff": 2,
            "id": "94",
            "init_time": 1564750026,
            "last_time": 1567220689,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "跳跃游戏 - dp",
            "diff": 3,
            "id": "95",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "跳跃游戏 - 时间 O(n), 空间 O(1)",
            "diff": 4,
            "id": "96",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "求数组中最长连续子序列的长度, 比如 [100, 4, 200, 2, 5, 1, 3] 的最长子序列是 1 2 3 4 5",
            "diff": 3,
            "id": "97",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "n 皇后 - 枚举每一列",
            "diff": 3,
            "id": "98",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "n 皇后 - 从全排列中筛选",
            "diff": 3,
            "id": "99",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "n 皇后 - 位运算",
            "diff": 4,
            "id": "100",
            "init_time": 1564750026,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "找出括号字符串 (())())()()(())) 中的最长的括号匹配的子串 - dp",
            "diff": 3,
            "id": "101",
            "init_time": 1565543512,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "将字符串切成回文的最小分割数",
            "diff": 3,
            "id": "102",
            "init_time": 1566026136,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 60,
            "desc": "0 左边必有 1 的二进制字符串数量 - 暴力递归 - 记忆数组 - dp - dp 压缩空间 - 矩阵乘法+快速幂",
            "diff": 3,
            "id": "103",
            "init_time": 1566026136,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "字符串匹配问题 - 递归",
            "diff": 4,
            "id": "104",
            "init_time": 1566141790,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "字符串匹配问题 - dp",
            "diff": 4,
            "id": "105",
            "init_time": 1566490836,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "将字符串添加最少的字符以变成回文字符串",
            "diff": 3,
            "id": "106",
            "init_time": 1566784881,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "基础算法": [
        {
            "cost_time": 20,
            "desc": "归并排序",
            "diff": 1,
            "id": "107",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "归并排序 - 小数组插排",
            "diff": 2,
            "id": "108",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "希尔排序",
            "diff": 2,
            "id": "109",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "插入排序",
            "diff": 1,
            "id": "110",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "选择排序",
            "diff": 1,
            "id": "111",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "快速排序 - 用随机化避免最坏情况",
            "diff": 2,
            "id": "112",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "快速排序 - 三取样切分",
            "diff": 3,
            "id": "113",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "快速排序 - 三取样切分 - 三向切分 - 小数组插排",
            "diff": 4,
            "id": "114",
            "init_time": 1564455598,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "堆排序",
            "diff": 2,
            "id": "115",
            "init_time": 1564474472,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "冒泡排序",
            "diff": 1,
            "id": "116",
            "init_time": 1564571977,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "计数排序",
            "diff": 1,
            "id": "117",
            "init_time": 1564572006,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "kmp 算法 - next 数组描述",
            "diff": 3,
            "id": "118",
            "init_time": 1564933464,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "插入排序改进 - 将最小挪到最左边作为哨兵以此来避免边界判断",
            "diff": 2,
            "id": "119",
            "init_time": 1565719173,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "插入排序改进 - 二分插入排序",
            "diff": 2,
            "id": "120",
            "init_time": 1565719173,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "大数据": [
        {
            "cost_time": 50,
            "desc": "不安全网页的黑名单包含 100 亿个黑名单网页, 每个网页的 URL 最多占用 64 B. 现在想要实现一种网页过滤系统, 可以根据网页的 URL 判断该网页是否在黑名单上, 请设计该系统",
            "diff": 3,
            "id": "121",
            "init_time": 1566908106,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "不安全网页的黑名单包含 100 亿个黑名单网页, 每个网页的 URL 最多占用 64 B. 现在想要实现一种网页过滤系统, 可以根据网页的 URL 判断该网页是否在黑名单上, 请设计该系统\n要求:\n\t1) 该系统允许有万分之一以下的判断失误率.\n\t2) 使用的额外空间不要超过 30 GB",
            "diff": 4,
            "id": "122",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "在一个包含 20 亿个全是 32 位整数的大文件中, 找到出现次数最多的数\n要求:\n\t内存限制为 2GB",
            "diff": 3,
            "id": "123",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "32 位无符号整数的范围是 0 ~ 4294967295, 现在有一个正好包含 40 亿个无符号整数的文件, 所以在整个范围中必然有没出现过的数. 可以使用最多 1GB 的内存, 怎么找到所有没出现过的数?\n进阶:\n\t 内存限制为 10 MB, 但是只用找到一个没出现过的数即可.",
            "diff": 3,
            "id": "124",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "有一个包含 100 亿个 URL 的大文件, 假设每个 URL 占用 64B. 请找出其中所有重复的 URL",
            "diff": 3,
            "id": "125",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "某搜索公司一天的用户搜索词汇是海量的 (百亿数据量), 请设计一种求出每天最热 top 100 词汇的可行办法.",
            "diff": 2,
            "id": "126",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "32 位无符号整数的范围是 0 ~ 4294957295, 现在有 40 亿个无符号整数, 可以使用最多 1GB 的内存, 找出所有出现了两次的数",
            "diff": 2,
            "id": "127",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "32 位无符号整数的范围是 0 ~ 4294957295, 现在有 40 亿个无符号整数, 可以使用最多 10MB 的内存, 怎么找到这 40 亿个整数的中位数?",
            "diff": 3,
            "id": "128",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "阐述一致性哈希算法的基本原理",
            "diff": 2,
            "id": "129",
            "init_time": 1566908774,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "字符串": [
        {
            "cost_time": 20,
            "desc": "大数相加",
            "diff": 1,
            "id": "130",
            "init_time": 1563532733,
            "last_time": 1566817259,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "012345678910111213...这样的数字字符串的第 n 位是什么?",
            "diff": 2,
            "id": "131",
            "init_time": 1563532733,
            "last_time": 1566817259,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在字符串 A 中删除所有在字符串 B 中存在的字符",
            "diff": 1,
            "id": "132",
            "init_time": 1563532733,
            "last_time": 1566817259,
            "times": 2,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "删除字符串 A 中所有重复字符",
            "diff": 1,
            "id": "133",
            "init_time": 1563532733,
            "last_time": 1566491003,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在字符串中找出第一个只出现 1 次的字符",
            "diff": 1,
            "id": "134",
            "init_time": 1563532733,
            "last_time": 1566491003,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "在字符流中找出第一个只出现 1 次的字符",
            "diff": 2,
            "id": "135",
            "init_time": 1563532733,
            "last_time": 1566562367,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "判断两个字符串是否是 anagram",
            "diff": 1,
            "id": "136",
            "init_time": 1563532733,
            "last_time": 1566562367,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "翻转英文句子中单词的顺序，但单词内字符顺序不能发生改变",
            "diff": 1,
            "id": "137",
            "init_time": 1563532733,
            "last_time": 1566562367,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "字符串转 int",
            "diff": 1,
            "id": "138",
            "init_time": 1563532733,
            "last_time": 1566562367,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "左旋转字符串",
            "diff": 1,
            "id": "139",
            "init_time": 1563532733,
            "last_time": 1566562367,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "将字符串中的数字相加, 比如 A-1BC--12 就是 -1 + 12 = 11, A-1B--2C--D6E",
            "diff": 1,
            "id": "140",
            "init_time": 1565269591,
            "last_time": 1566575460,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "将字符串中指定个数的连续 k 个 0 移除",
            "diff": 1,
            "id": "141",
            "init_time": 1565269591,
            "last_time": 1566575460,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "判断两个字符串是否互为旋转词 - kmp",
            "diff": 3,
            "id": "142",
            "init_time": 1565269591,
            "last_time": 1566575460,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "将字符串中指定字符串替换为另一个指定字符串",
            "diff": 2,
            "id": "143",
            "init_time": 1565269591,
            "last_time": 1566575460,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "生成字符串的统计字符串",
            "diff": 1,
            "id": "144",
            "init_time": 1565366271,
            "last_time": 1566654007,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "根据字符串的统计字符串, 获取第 k 个位置处的字符是什么",
            "diff": 1,
            "id": "145",
            "init_time": 1565366271,
            "last_time": 1566654007,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断字符串中每个字符是否均出现了一次 - 哈希表",
            "diff": 1,
            "id": "146",
            "init_time": 1565366271,
            "last_time": 1566654007,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断字符串中每个字符是否均出现了一次 - 空间 O(1)",
            "diff": 1,
            "id": "147",
            "init_time": 1565366271,
            "last_time": 1566654007,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "在含有 null 的字符串数组中找到最左边的指定的字符串, 若果没有找到, 则返回 -1",
            "diff": 1,
            "id": "148",
            "init_time": 1565366271,
            "last_time": 1566654007,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "将字符串中的空格替换成 %20",
            "diff": 1,
            "id": "149",
            "init_time": 1565366271,
            "last_time": 1566723832,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "将字符串中的 * 移动到最左边",
            "diff": 1,
            "id": "150",
            "init_time": 1565366271,
            "last_time": 1566723832,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "字符串数组中给定两个字符串之间的最小距离",
            "diff": 1,
            "id": "151",
            "init_time": 1565531495,
            "last_time": 1566723832,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "字符串数组中给定两个字符串之间的最小距离 - 批量查询 - O(1)",
            "diff": 3,
            "id": "152",
            "init_time": 1565531495,
            "last_time": 1566730313,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 10,
            "desc": "判断括号字符串是否整体匹配, 即每个 ) 都有一个相应的 ( 与之匹配, 要求时间 O(N), 空间 O(1)",
            "diff": 1,
            "id": "153",
            "init_time": 1565531495,
            "last_time": 1566730313,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "解析字符串表达式并计算出结果, 比如 (1 + 2) * 3 = 9",
            "diff": 3,
            "id": "154",
            "init_time": 1565690254,
            "last_time": 1566730313,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "字符串数组中的能拼成的字典序最小的 '总字符串' 是什么? 需要能证明该排序策略",
            "diff": 3,
            "id": "155",
            "init_time": 1565719173,
            "last_time": 1566730313,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "str1 包含 str2 所有字符的最小长度子串",
            "diff": 3,
            "id": "156",
            "init_time": 1565886041,
            "last_time": 1566817259,
            "times": 1,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "实现 trie 树, insert delete find prefix 接口",
            "diff": 3,
            "id": "157",
            "init_time": 1566411069,
            "last_time": 1566817259,
            "times": 1,
            "tmp_ignore": 0
        }
    ],
    "数组": [
        {
            "cost_time": 20,
            "desc": "找到数组中累加和为指定值的最长序列, 元素皆为正数",
            "diff": 1,
            "id": "158",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "找到数组中累加和为指定值的最长序列, 元素可正可负",
            "diff": 2,
            "id": "159",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "将数组循环右移 k 位的结果",
            "diff": 1,
            "id": "160",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "在二维有序数组中的查找给定值",
            "diff": 1,
            "id": "161",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "顺时针打印矩阵",
            "diff": 1,
            "id": "162",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "找出数组中超过一半的元素",
            "diff": 1,
            "id": "163",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "找到数组中连续子序列的最大和，元素可正可负",
            "diff": 2,
            "id": "164",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "调整数组使得数组中所有元素组成的字符串所表示的数值最小",
            "diff": 2,
            "id": "165",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "不修改数组的情况下, 找到数组中一个重复的元素，元素范围 1 ~ n, 个数 n+1",
            "diff": 2,
            "id": "166",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "找到数组中一个重复元素, 元素范围 0 ~ n, 个数 n+1",
            "diff": 2,
            "id": "167",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "整数数组中除了两个数字外，其余数字都出现了两次，找到这两个只出现一次的数字",
            "diff": 1,
            "id": "168",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "数组中除了一个数字只出现一次外，其他数字都出现了三次，找出只出现一次的那个数字",
            "diff": 1,
            "id": "169",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "在自然数 {1,2,3,4...} 序列中打印出所有和为 s 的连续正数序列",
            "diff": 1,
            "id": "170",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "找出数组中逆序对的数量",
            "diff": 1,
            "id": "171",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 15,
            "desc": "调整数组使得奇数都在左边，偶数都在右边",
            "diff": 1,
            "id": "172",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "已排序数组中, 找出值和下标相等的元素",
            "diff": 1,
            "id": "173",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "数组个数 n-1, 范围 0 ~ n-1 中有且只有一个元素不在数组中，找出这个缺失元素。比如 0 1 2 4 5，缺失 3",
            "diff": 1,
            "id": "174",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "给定值 k, 在一个已排序数组中，统计 k 出现了多少次",
            "diff": 1,
            "id": "175",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "数组与矩阵": [
        {
            "cost_time": 15,
            "desc": "顺时针转圈打印矩阵",
            "diff": 1,
            "id": "176",
            "init_time": 1568561332,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "将正方形矩阵顺指针旋转 90 度 - 两次变换",
            "diff": 1,
            "id": "177",
            "init_time": 1568561332,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "将正方形矩阵顺指针旋转 90 度 - 子矩阵思路",
            "diff": 1,
            "id": "178",
            "init_time": 1568561332,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "栈和队列": [
        {
            "cost_time": 50,
            "desc": "实现有 get_min 接口的栈，要求: get_min 方法时间复杂度是 O(1)",
            "diff": 1,
            "id": "179",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "实现有 get_max 接口的栈，要求: get_max 方法时间复杂度是 O(1)",
            "diff": 1,
            "id": "180",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "实现有 get_min 接口的队列，要求: get_min 方法时间复杂度是 O(1)",
            "diff": 1,
            "id": "181",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "实现有 get_max 接口的队列，要求: get_max 方法时间复杂度是 O(1)",
            "diff": 1,
            "id": "182",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "用两个栈实现队列",
            "diff": 1,
            "id": "183",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "用两个队列实现栈",
            "diff": 1,
            "id": "184",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 25,
            "desc": "仅使用栈操作和递归翻转一个栈",
            "diff": 2,
            "id": "185",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "使用另一个辅助栈来完成对栈的排序，让元素从栈顶到栈底部升序排列",
            "diff": 2,
            "id": "186",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "滑动窗口的最大值",
            "diff": 1,
            "id": "187",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "用数组构建一棵 max_tree, 该树的每个父节点都是它所在子树中的最大值",
            "diff": 2,
            "id": "188",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "求 01 矩阵中, 由 1 所围成的最大矩阵面积",
            "diff": 1,
            "id": "189",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "最大值减去最小值小于或等于 num 的子数组数量",
            "diff": 3,
            "id": "190",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "给定一个压栈序列, 和一个弹出序列, 判断弹出序列是否合法",
            "diff": 1,
            "id": "191",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ],
    "链表": [
        {
            "cost_time": 25,
            "desc": "打印两条有序链表中节点值相同的公共部分 (不要理解成相交链表的公共部分)",
            "diff": 1,
            "id": "192",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "单链表删除倒数第 k 个节点",
            "diff": 1,
            "id": "193",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "双向链表删除倒数第 k 个节点",
            "diff": 1,
            "id": "194",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "删除链表的中间节点",
            "diff": 1,
            "id": "195",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 25,
            "desc": "删除链表的 a/b 处的节点",
            "diff": 2,
            "id": "196",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "反转单向链表",
            "diff": 1,
            "id": "197",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "反转双向链表",
            "diff": 1,
            "id": "198",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "反转部分单向链表",
            "diff": 2,
            "id": "199",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "环形单链表约瑟夫问题",
            "diff": 1,
            "id": "200",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "约瑟夫问题套公式解法",
            "diff": 3,
            "id": "201",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "判断链表是否是回文结构",
            "diff": 1,
            "id": "202",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "将单向链表按某值划分为左边小, 中间相等, 右边大的形式",
            "diff": 1,
            "id": "203",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "复制含有随机指针节点的链表",
            "diff": 1,
            "id": "204",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "两个单链表生成相加链表 (链表节点值的范围是 0 ~ 9)",
            "diff": 1,
            "id": "205",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断两条无环单链表是否相交",
            "diff": 1,
            "id": "206",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "判断链表是否有环, 若有，求出入口节点和环中节点数",
            "diff": 1,
            "id": "207",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "判断两条有环单链表是否相交",
            "diff": 1,
            "id": "208",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "将单链表每 k 个节点之间逆序, 不够 k 个的区间不逆序",
            "diff": 2,
            "id": "209",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "删除无序单链表中重复出现的节点",
            "diff": 1,
            "id": "210",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "单向链表中, 删除指定值的所有节点",
            "diff": 1,
            "id": "211",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "搜索二叉树转换成双向链表",
            "diff": 1,
            "id": "212",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "单链表的选择排序",
            "diff": 1,
            "id": "213",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 30,
            "desc": "O(1) 删除单链表指定节点",
            "diff": 1,
            "id": "214",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 40,
            "desc": "向有序环形链表中插入新节点",
            "diff": 1,
            "id": "215",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 20,
            "desc": "合并两个有序的单链表",
            "diff": 1,
            "id": "216",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        },
        {
            "cost_time": 50,
            "desc": "按照 L1->R1->L2->R2..的方式重新组合单链表",
            "diff": 1,
            "id": "217",
            "init_time": 1563532733,
            "last_time": 0,
            "times": 0,
            "tmp_ignore": 0
        }
    ]
}