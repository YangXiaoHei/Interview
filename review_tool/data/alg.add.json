{
    "动态规划和递归" : 
    [
        {
            "desc" : "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - 暴力递归",
            "cost_time" : 40,
            "diff" : 3
        }
    ],
    "基础算法" : 
    [
        {
            "desc" : "kmp 算法 - next 数组描述",
            "cost_time" : 40,
            "diff" : 3
        }
    ],
     "二叉树" : 
    [
        {
            "desc" : "先序遍历 - 非递归 - 把左孩子也放到栈里",
            "cost_time" : 10,
            "diff" : 1
        }
    ],
    "字符串" : 
    [
        {
            "desc" : "将字符串中的 * 移动到最左边",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "翻转英语句子, 但单词中字符的顺序不能颠倒",
            "cost_time" : 10,
            "diff" : 1 
        },
        {
            "desc" : "将字符串左边 k 个字符整体移动到右边",
            "cost_time" : 20,
            "diff" : 1 
        },
        {
            "desc" : "字符串数组中给定两个字符串之间的最小距离",
            "cost_time" : 20,
            "diff" : 1 
        },
        {
            "desc" : "字符串数组中给定两个字符串之间的最小距离 - 批量查询 - O(1)",
            "cost_time" : 40,
            "diff" : 3
        },
        {
            "desc" : "将字符串添加最少的字符以变成回文字符串",
            "cost_time" : 40,
            "diff" : 3
        },
        {
            "desc" : "判断括号字符串是否整体匹配, 即每个 ) 都有一个相应的 ( 与之匹配, 要求时间 O(N), 空间 O(1)",
            "cost_time" : 10,
            "diff" : 1
        },
        {
            "desc" : "找出括号字符串 (())())()()(())) 中的最长匹配条件的子串 - dp",
            "cost_time" : 30,
            "diff" : 3
        }
    ]
}
