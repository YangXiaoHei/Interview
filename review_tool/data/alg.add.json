{
    "二叉树" : 
    [
        {
            "desc" : "判断数组是否是二叉搜索树的后序遍历",
            "cost_time" : 15,
            "diff" : 1
        },
        {
            "desc" : "根据后序遍历重建二叉搜索树",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断二叉树是否是二叉搜索树 - 递归",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断二叉树是否是二叉搜索树 - 非递归 - 空间 O(n)",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断二叉树是否是二叉搜索树 - 非递归 - 空间 O(1)",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断二叉树是否是完全二叉树",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "根据有序数组重建平衡二叉树",
            "cost_time" : 15,
            "diff" : 1
        },
        {
            "desc" : "二叉树中序遍历的下一个节点",
            "cost_time" : 15,
            "diff" : 1
        },
        {
            "desc" : "两个节点的最低公共祖先 - 后序遍历解法",
            "cost_time" : 20,
            "diff" : 2
        },
        {
            "desc" : "两个节点的最低公共祖先 - 批量查询 - 时间 O(1)",
            "cost_time" : 30,
            "diff" : 2
        },
        {
            "desc" : "两个节点的最低公共祖先 - 批量查询 - 时间 O(h)",
            "cost_time" : 20,
            "diff" : 2
        }
    ]
}
