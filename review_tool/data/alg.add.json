{
    "动态规划和递归" : 
    [
        {
            "desc" : "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - 暴力递归",
            "cost_time" : 40,
            "diff" : 3
        }
    ],
    "基础算法" : 
    [
        {
            "desc" : "kmp 算法 - next 数组描述",
            "cost_time" : 40,
            "diff" : 3
        }
    ],
     "二叉树" : 
    [
        {
            "desc" : "先序遍历 - 非递归 - 把左孩子也放到栈里",
            "cost_time" : 10,
            "diff" : 1
        }
    ],
    "字符串" : 
    [
        {
            "desc" : "生成字符串的统计字符串",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "根据字符串的统计字符串, 获取第 k 个位置处的字符是什么",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断字符串中每个字符是否均出现了一次 - 哈希表",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "判断字符串中每个字符是否均出现了一次 - 空间 O(1)",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "在含有 null 的字符串数组中找到最左边的指定的字符串, 若果没有找到, 则返回 -1",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "将字符串中的空格替换成 %20",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "将字符串中的 * 移动到最左边",
            "cost_time" : 20,
            "diff" : 1
        }
    ]
}
