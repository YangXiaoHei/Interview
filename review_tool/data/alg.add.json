{
    "动态规划和递归" : 
    [
    ],
    "基础算法" : 
    [
        
    ],
     "二叉树" : 
    [
        
    ],
    "字符串" : 
    [
        
    ],
     "大数据" : 
    [
        
    ],
    "位运算" : 
    [
        {
            "desc" : "不用额外变量交换两个整数的值",
            "cost_time" : 5,
            "diff" : 1
        }
    ],
     "数组与矩阵" : 
    [
        {
            "desc" : "顺时针转圈打印矩阵",
            "cost_time" : 15,
            "diff" : 1
        },
        {
            "desc" : "将正方形矩阵顺指针旋转 90 度 - 两次变换",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "将正方形矩阵顺指针旋转 90 度 - 子矩阵思路",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "之字形打印矩阵",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "找到无序数组中最小的 k 个数 - 堆实现",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "找到无序数组中最小的 k 个数 - 快排思想",
            "cost_time" : 20,
            "diff" : 1
        },
        {
            "desc" : "需要排序的最短子数组长度",
            "cost_time" : 30,
            "diff" : 2
        },
        {
            "desc" : "在数组中找到出现次数超过半数的数 - 快排思想",
            "cost_time" : 30,
            "diff" : 2
        },
        {
            "desc" : "在数组中找到出现次数超过半数的数 - 删除对元素",
            "cost_time" : 30,
            "diff" : 2
        },
        {
            "desc" : "在行和列都排好的矩阵中找数",
            "cost_time" : 10,
            "diff" : 1
        },
        {
            "desc" : "最长的可整合子数组的长度",
            "cost_time" : 30,
            "diff" : 2
        }
    ]
}
