{
    "动态规划和递归" : 
    [
        {
            "desc" : "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - 暴力递归",
            "cost_time" : 40,
            "diff" : 3
        },
        {
            "desc" : "纸牌策略游戏, 先后拿走最左和最右的纸牌，最后得分最高获胜 - dp",
            "cost_time" : 50,
            "diff" : 4
        },
        {
            "desc" : "跳跃游戏 - 暴力递归",
            "cost_time" : 20,
            "diff" : 2
        },
        {
            "desc" : "跳跃游戏 - dp",
            "cost_time" : 30,
            "diff" : 3
        },
        {
            "desc" : "跳跃游戏 - 时间 O(n), 空间 O(1)",
            "cost_time" : 40,
            "diff" : 4
        },
        {
            "desc" : "求数组中最长连续子序列的长度, 比如 [100, 4, 200, 2, 5, 1, 3] 的最长子序列是 1 2 3 4 5",
            "cost_time" : 40,
            "diff" : 3
        },
        {
            "desc" : "n 皇后 - 枚举每一列",
            "cost_time" : 30,
            "diff" : 3
        },
        {
            "desc" : "n 皇后 - 从全排列中筛选",
            "cost_time" : 40,
            "diff" : 3
        },
        {
            "desc" : "n 皇后 - 位运算",
            "cost_time" : 50,
            "diff" : 4
        }
    ],
    "基础算法" : 
    [
    
    ]
}
